-- Overload the LUA tostring function to allow for table conversion.
local LUAtostring = tostring
function tostring(theString)
	if type(theString) == "table" then
		return toJSON(theString)
	else
		return LUAtostring(theString)
	end
end
-- Useful Function on MTA Wiki
function guiGridListGetSelectedText(gridList, columnIndex)
    local selectedItem = guiGridListGetSelectedItem(gridList)
    if (selectedItem) then
        local text = guiGridListGetItemText(gridList, selectedItem, columnIndex or 1)
        if (text) and not (text == "") then
            return text
        end
    end
    return false
end
function getGridListRowIndexFromText(gridList, text, column)
  for i=0, guiGridListGetRowCount(gridList)-1 do
    if (guiGridListGetItemText(gridList, i, column) == text) then
      return i
	end
     end
   return false
end

acceptableValues = {
	['mass']                         = {"Float",1,100000,''},
	['turnMass']                     = {"Float",0,1000000,''},
	['dragCoeff']                    = {"Float",-200,200,''},
	['centerOfMass']                 = {"Table = { [1]=posX, [2]=posY, [3]=posZ } (floats)",-10,10,"Get returns a table, set needs a table."},
	['percentSubmerged']             = {"Integer",1,99999,''},
	['tractionMultiplier']           = {"Float",-100000,100000,''},
	['tractionLoss']                 = {"Float",0,100,''},
	['tractionBias']                 = {"Float",0,1,''},
	['numberOfGears']                = {"Integer",1,5,''},
	['maxVelocity']                  = {"Float",0.1,200000,''},
	['engineAcceleration']           = {"Float",0,100000,''},
	['engineInertia']                = {"Float",-1000,1000,"Inertia of 0 can cause a LSOD. (Unable to divide by zero)"},
	['driveType']                    = {"String","-","-","Use 'rwd', 'fwd' or 'awd'."},
	['engineType']                   = {"String","-","-","Use 'petrol', 'diesel' or 'electric'."},
	['brakeDeceleration']            = {"Float",0.1,100000,''},
	['brakeBias']                    = {"Float",0,1,''},
	['ABS']                          = {"Boolean",'True','False',"Has no effect."},
	['steeringLock']                 = {"Float",0,360,''},
	['suspensionForceLevel']         = {"Float",0,100,''},
	['suspensionDamping'] 		     = {"Float",0,100,''},
	['suspensionHighSpeedDamping']   = {"Float",0,600,''},
	['suspensionUpperLimit'] 	     = {"Float",-50,50,"Can\'t be equal to suspensionLowerLimit."},
	['suspensionLowerLimit']         = {"Float",-50,50,"Can\'t be equal to suspensionUpperLimit."},
	['suspensionFrontRearBias']      = {"Float",0,1,"Hardcoded maximum is 3.0, but values above 1.0 have no effect."},
	['suspensionAntiDiveMultiplier'] = {"Float",0,30,''},
	['seatOffsetDistance']           = {"Float",-20,20,''},
	['collisionDamageMultiplier']    = {"Float",0,10,''},
	['monetary']                     = {"Integer",0,230195200,"Get works, set is disabled."},
	['modelFlags']                   = {"Hexadecimal/Decimal","-","-","Property uses a decimal value, generated by a hexadecimal value. Use 0x12345678. See projectcerbera for possible values."},
	['handlingFlags']                = {"Hexadecimal/Decimal","-","-","Property uses a decimal value, generated by a hexadecimal value. Use 0x12345678. See projectcerbera for possible values."},
	['headLight']                    = {"String","-","-","Get works, set is disabled. Available values: 'long', 'small', 'big', 'tall'."},
	['tailLight']                    = {"String","-","-","Get works, set is disabled. Available values: 'long', 'small', 'big', 'tall'."},
	['animGroup']                    = {"Integer","-","-","Get works, set is disabled."}
}
attrCol, valCol, defValCol, acceptRangeCol = nil
TheVehicle = nil
Window = {}
Button = {}
Grid = {}
Rows = {}

function generateHandlingGUI(theVehicle)
	TheVehicle = theVehicle
	vehicleHandling = getVehicleHandling(TheVehicle)
	stockHandling = getOriginalHandling(getElementData(TheVehicle, "model"))
	Window[1] = guiCreateWindow(0.6711,0.3663,0.3227,0.5925,"Handling Editor - " .. getVehicleName(theVehicle) .. " - VIN: " .. getElementData(theVehicle, "dbid"),true)
		guiWindowSetMovable(Window[1],false)
		guiWindowSetSizable(Window[1],false)
	Grid[1] = guiCreateGridList(0.0242,0.057,0.954,0.8523,true,Window[1])
		addEventHandler("onClientGUIDoubleClick", Grid[1], modifyHandlingGUI)
		guiGridListSetSelectionMode(Grid[1], 0)
	attrCol = guiGridListAddColumn(Grid[1],"Attribute",0.2)
	valCol = guiGridListAddColumn(Grid[1],"Value",0.2)
	defValCol = guiGridListAddColumn(Grid[1],"Default Value",0.2)
	acceptRangeCol = guiGridListAddColumn(Grid[1],"Acceptable Range",0.2)
	local notesCol = guiGridListAddColumn(Grid[1],"Notes",0.2)

	for index, value in pairs(vehicleHandling) do
		local row = guiGridListAddRow(Grid[1])
		table.insert(Rows, row)
		guiGridListSetItemText(Grid[1], row, attrCol, index, false, false)
		guiGridListSetItemText(Grid[1], row, valCol, tostring(value), false, false)
		guiGridListSetItemText(Grid[1], row, defValCol, tostring(stockHandling[index]), false, false)
		guiGridListSetItemText(Grid[1], row, acceptRangeCol, tostring(acceptableValues[index][2]) .. " - " .. tostring(acceptableValues[index][3]), false, false)
		guiGridListSetItemText(Grid[1], row, notesCol, tostring(acceptableValues[index][4]), false, false)
	end
	Button[1] = guiCreateButton(0.6755,0.9219,0.3002,0.0591,"Save and Exit",true,Window[1])
		addEventHandler("onClientGUIClick", Button[1], saveHandlingGUI)
end
addEvent("openHandlingGUI", true)
addEventHandler("openHandlingGUI", getRootElement(), generateHandlingGUI)

function saveHandlingGUI(button, state)
	if button == "left" and state == "up" then
		newHandling = {}
		for row in ipairs(Rows) do
			newHandling[guiGridListGetItemText(Grid[1], row, attrCol)] = guiGridListGetItemText(Grid[1], row, valCol)
		end
		destroyElement(Window[1])
		Window = {}
		Button = {}
		Grid = {}
		Rows = {}
		triggerServerEvent("saveVehicleHandlingGUI", TheVehicle, newHandling)
	end
end

function modifyHandlingGUI(button, state)
	if button == "left" and state == "up" then
		ModWindow = {}
		ModButton = {}
		ModLabel = {}
		ModEdit = {}

		ModWindow[1] = guiCreateWindow(0.3289,0.2763,0.3,0.14,"Set " .. guiGridListGetSelectedText(Grid[1], attrCol) .. " Value",true)
			guiWindowSetMovable(ModWindow[1],false)
			guiWindowSetSizable(ModWindow[1],false)
			guiSetInputEnabled(true)
		ModLabel[1] = guiCreateLabel(0.0268,0.2632,0.9357,0.2632,"Default: " .. guiGridListGetSelectedText(Grid[1], defValCol) .." \n Acceptable: " .. guiGridListGetSelectedText(Grid[1], acceptRangeCol),true,ModWindow[1])
			guiLabelSetHorizontalAlign(ModLabel[1],"center",false)
		ModEdit[1] = guiCreateEdit(0.0268,0.5263,0.5496,0.3263,"",true,ModWindow[1])
		ModButton[1] = guiCreateButton(0.5952,0.5474,0.1823,0.3053,"Save",true,ModWindow[1])
			addEventHandler("onClientGUIClick", ModButton[1], function (button, state)
				if button == "left" and state == "up" then
					guiGridListSetItemText(Grid[1], getGridListRowIndexFromText(Grid[1], guiGridListGetSelectedText(Grid[1], attrCol), attrCol), valCol, tostring(guiGetText(ModEdit[1])), false, false)
					guiSetInputEnabled(false)
					destroyElement(ModWindow[1])
					ModWindow = {}
					ModButton = {}
					ModLabel = {}
					ModEdit = {}
				end
			end)
		ModButton[2] = guiCreateButton(0.7909,0.5474,0.1716,0.3053,"Cancel",true,ModWindow[1])
			addEventHandler("onClientGUIClick", ModButton[2], function (button, state)
				if button == "left" and state == "up" then
					guiSetInputEnabled(false)
					destroyElement(ModWindow[1])
					ModWindow = {}
					ModButton = {}
					ModLabel = {}
					ModEdit = {}
				end
			end)
	end
end

		



